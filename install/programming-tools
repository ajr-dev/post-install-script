#!/bin/bash

# shellcheck disable=SC2034
declare -f assertConfirmation &>/dev/null ||  source "$HOME/.dotfiles/install/declarations"

if assertConfirmation "Install programming tools?"; then
    clear
    echo "Installing c compiler, gdb, jdk, jre 9, nodejs, npm"
    echo "========================================================================"
    sudo apt-get -y remove openjdk-8*
    sudo apt-get -y install build-essential gcc g++ gdb make openjdk-9-jdk openjdk-9-jre nodejs npm \
        git dconf-cli unattended-upgrades unzip shellcheck xdotool python python-setuptools \
        ruby python3 hddtemp lm-sensors curl ubuntu-restricted-extras lftp zsh zenity
    echo "========================================================================"

    clear
    echo "Installing xbuild, go, tsserver, node, npm, rustc, and cargo"
    echo "========================================================================"
    # Install mono http://www.mono-project.com/docs/getting-started/install/linux/
    # http://stackoverflow.com/questions/4749330/how-to-test-if-string-exists-in-file-with-bash-shell
    sudo apt-get -y install mono-xbuild
    if ! grep -Fxq "deb http://download.mono-project.com/repo/debian wheezy main" /etc/apt/sources.list.d/mono-xamarin.list; then
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
        echo "deb http://download.mono-project.com/repo/debian wheezy main" | sudo tee /etc/apt/sources.list.d/mono-xamarin.list
        sudo apt-get -y update  && sudo apt-get -y upgrade
        sudo apt-get -y install mono-complete
    fi

    # Install go https://www.digitalocean.com/community/tutorials/how-to-install-go-1-6-on-ubuntu-16-04
    if [ ! -f /usr/local/go ]; then
        wget https://storage.googleapis.com/golang/go1.8.linux-amd64.tar.gz
        sudo tar -C /usr/local/ -zxvf go1.8.linux-amd64.tar.gz
        rm go1.8.linux-amd64.tar.gz
        mkdir -p ~/code/go
        # shellcheck disable=SC2016
        if [ -f ~/.local.zsh ]  &&  ! grep -q "/usr/local/go/bin" ~/.local.zsh; then
            echo 'export GOPATH=$HOME/code/go' >> ~/.local.zsh
            echo 'export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin' >> ~/.local.zsh
        elif [ -f ~/.zshrc ]  &&  ! grep -q "/usr/local/go/bin" ~/.zshrc; then
            echo 'export GOPATH=$HOME/code/go' >> ~/.zshrc
            echo 'export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin' >> ~/.zshrc
        elif [ -f ~/.profile ]  &&  ! grep -q "/usr/local/go/bin" ~/.profile; then
            echo 'export GOPATH=$HOME/code/go' >> ~/.profile
            echo 'export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin' >> ~/.profile
            source ~/.profile
        fi
        mkdir -p "$GOPATH/src/github.com/user/go-installed"
        echo << EOF >> "$GOPATH/src/github.com/user/go-installed/go-installed.go"
package main

import "fmt"

func main() {
    fmt.Printf("Go succesfully installed\n")
}
EOF
        go install github.com/user/go-installed
        which go-installed
        if [ ! "$?" = "0" ]; then
            echo "Go wasn't properly installed" 1>&2
            rm -rf "$GOPATH/src/github.com/user/go-installed"
            exit 1
        fi
        rm -rf "$GOPATH/src/github.com/user/go-installed"
    fi

    # Install TypeScript standalone server
    npm install --save typescript

    curl https://sh.rustup.rs -sSf | sh
    source "$HOME/.cargo/env"
    echo "========================================================================"

    if assertConfirmation "Install apache2, php7, mysql-server?"; then
        source "$DOTFILES/install/lamp-install"
    fi

    if assertConfirmation "Install kali linux tools?"; then
        source "$DOTFILES/install/katoolin"
    fi

    if assertConfirmation "Install cs50 functions?"; then
        # https://github.com/tysonchamp/cs50/blob/master/cs50.sh
        sudo apt-get install -y scratch filezilla
        echo "========================================================================"
        echo "c compiler, default-jdk & jre and filezilla has been installed"
        echo "========================================================================"

        wget http://mirror.cs50.net/appliance50/2015/debs/dists/trusty/main/binary-i386/check50_1.19-2_i386.deb
        wget http://mirror.cs50.net/appliance50/2015/debs/dists/trusty/main/binary-i386/render50_1.8-0_i386.deb
        wget http://mirror.cs50.net/appliance50/2015/debs/dists/trusty/main/binary-i386/style50_2.1.4-1_i386.deb
        echo "Download completed"
        uname -a | grep arm && dpkg --force-architecture --force-depends -i check50_1.19-2_i386.deb || dpkg -i check50_1.19-2_i386.deb
        echo "check50 made"
        uname -a | grep arm && dpkg --force-architecture --force-depends -i style50_2.1.4-1_i386.deb || dpkg -i style50_2.1.4-1_i386.deb
        echo "style50 made"
        uname -a | grep arm && dpkg --force-architecture --force-depends -i render50_1.8-0_i386.deb || dpkg -i render50_1.8-0_i386.deb
        echo "render50 made"
        echo "========================================================================"
        echo "check50, style50 and render50 have been installed"

        clear
        echo "Installing custom libraries for C/C++ and php for cs50"
        echo "========================================================================"
        wget http://mirror.cs50.net/appliance50/2015/debs/dists/trusty/main/binary-i386/library50-c_6-0_i386.deb
        dpkg -i library50-c_6-0_i386.deb
        rm library50-c_6-0_i386.deb
        wget http://mirror.cs50.net/appliance50/2015/debs/dists/trusty/main/binary-i386/library50-php_4-0_i386.deb
        dpkg -i library50-php_4-0_i386.deb
        rm library50-php_4-0_i386.deb
        wget https://github.com/tysonchamp/spl-for-ubuntu/archive/master.zip
        unzip master.zip
        cd spl-for-ubuntu-master
        make
        make install
        rm -rf master.zip spl-for-ubuntu-master ./*deb*
        echo "========================================================================"

        clear
        echo "
        # My custom alias for CS50 By Harvard University
        mkcs50() {
            echo "cc -ggdb -std=c99 -Wall -Werror ${1}.c -lcrypt -lcs50 -lm -o $1";
            cc -ggdb -std=c99 -Wall -Werror ${1}.c -lcrypt -lcs50 -lm -o $1 ;
        }
        alias mk=mkcs50" | cat >> ~/.bashrc
        echo "========================================================================"
        source ~/.bashrc
        sudo chmod -R 777 /var/www/*

        clear
        echo "CS50 README
        ============================================================================
        1. Install Browser Addons:
        ============================================================================
        After installation of apliance is finished, install the below addons in your
        mozilla firefox web browser:
        1) https://addons.mozilla.org/en-US/firefox/addon/1843
        2) https://addons.mozilla.org/en-US/firefox/addon/3829
        3) https://addons.mozilla.org/en-US/firefox/addon/60
        2. Scratch:
        ============================================================================
        Scratch Is already installed but still If you want to access the online
        version then visit below url: http://scratch.mit.edu/
        3. Install Oracle Java:
        ============================================================================
        If you wanna install through PPA, goto below url
        http://www.webupd8.org/2012/01/install-oracle-java-jdk-7-in-ubuntu-via.html
        or,
        download from official website
        http://java.com/en/download/manual.jsp"
        read -n 1 -p "\nContinue?\n"
    fi
fi
