#!/bin/bash

# shellcheck disable=SC2034
declare -f assertConfirmation &>/dev/null ||  source "$HOME/.dotfiles/install/declarations"

if sudo -v; then
    packages=( vim-gtk curl cmake xclip keepassx zsh )
    for app in "${packages[@]}" ; do
        if ! command_exists $app; then
            sudo apt-get -y install "$app"
        fi
    done
fi

# TODO: fix check to only perform once
if ! [ -f ~/.gitconfig ]  &&  assertConfirmation "Â¿Configure git?" "${autoConfirm:?}"; then
    source "$INSTALL/git-setup"
fi

if assertConfirmation "Import local config?" "${autoConfirm:?}"
then
    if [ -f ~/.dotfiles/local.vim ]  &&  [ -f ~/.dotfiles/local.zsh ]  &&  [ -f ~/.dotfiles/local.tmux ]; then
        cp ~/.dotfiles/local.vim ~/.local.vim
        cp ~/.dotfiles/local.zsh ~/.local.zsh
        cp ~/.dotfiles/local.tmux ~/.local.tmux
    else
        echo "Local configuration files don't exist" >&2
        exit
    fi
fi

if ! command_exists tmux  ||  [[ ! "$(tmux -V)" == *"2.4"* ]]  &&  assertConfirmation "Install tmux?"; then
    source "$DOTFILES/install/tmux-install"
fi


if command_exists tmux  &&  assertConfirmation "Configure tmux?" "${autoConfirm:?}"
then
    # get italics in tmux
    cd ~/.dotfiles/tmux  ||  { echo "$HOME/.dotfiles/tmux doesn't exist" ; exit ; }
    tic xterm-256color-italic.terminfo
    mkdir -p ~/.tmux/resurrect
    [ -f ~/.dotfiles/tmux/last ]  &&  cp ~/.dotfiles/tmux/last ~/.tmux/resurrect/
    if [[ ! -d ~/.tmux/plugins/tpm ]]; then
        git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
    fi
fi

if assertConfirmation "Configure vim?" "${autoConfirm:?}"
then
    if [[ ! -e ~/.vimrc  &&  ! -d ~/.vim  &&  ! -d ~/.config/nvim/ ]]; then
        source "$INSTALL/link-setup"
    fi

    if ! command_exists  nvim  &&  assertConfirmation "Install neovim?" "${autoConfirm:?}"; then
        source "$INSTALL/neovim-install"
    fi

    source "$INSTALL/vim-setup"
fi

if command_exists zsh  &&  ! [[ $SHELL =~ .*zsh.* ]]  && \
    assertConfirmation "Change default shell to zsh?" "${autoConfirm:?}"
then
    echo "Configuring zsh as default shell"
    chsh -s "$(which zsh)"

    if ! command_exists zplug; then
        echo "installing zplug, a plugin manager for zsh - http://zplug.sh"
        git clone https://github.com/zplug/zplug ~/.zplug
    fi
fi

# https://askubuntu.com/questions/283908/how-can-i-install-and-use-powerline-plugin
if ! font_installed Hack  &&  \
    assertConfirmation "Add powerline fonts?" "${autoConfirm:?}"
then
    source "$INSTALL/font-install"
fi

if [[ $DESKTOP == "gnome" ]]  ||  [[ $DESKTOP == "xubuntu" ]]  || \
   [[ $DESKTOP == "cinnamon" ]]  ||  [[ $DESKTOP == "mate" ]]  || \
   [[ $DESKTOP == "kali" ]]  &&  assertConfirmation "Change system settings?" "${autoConfirm:?}"
then
    if [[ $DESKTOP == "gnome" ]]; then
        source "$INSTALL/gnome-settings"
    elif [[ $DESKTOP == "xubuntu" ]]; then
        source "$INSTALL/xubuntu-settings"
    elif [[ $DESKTOP == "cinnamon" ]]; then
        source "$INSTALL/cinnamon-settings"
    elif [[ $DESKTOP == "mate" ]]; then
        source "$INSTALL/mate-settings"
    elif [[ $DESKTOP == "kali" ]]; then
        source "$INSTALL/kali-settings"
    fi
fi

# TODO: check if already done
if assertConfirmation "Unattended upgrades?" "${autoConfirm:?}"; then
    source "$INSTALL/unattended-upgrades"
fi

# TODO: this isn't working. Fix if already done
if assertConfirmation "Never ask for passwords?"; then
    source "$INSTALL/no-password-prompt"
fi

# Check if all files from Dropbox have already been copied
if [ -d ~/Dropbox ]  &&  assertConfirmation "Copy dropbox files to system?"; then
    source "$INSTALL/dropbox-setup"
fi
